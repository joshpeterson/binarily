# Enable C++ support
language: cpp

stages:
  - prebuild
  - build
  - sanitizers
  - deploy

jobs:
  include:
    - stage: prebuild
      name: "Verify code formating"
      dist: xenial
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang-format-10
      script: ./tools/run-clang-format.py -r src test bench
    - stage: prebuild
      name: "Static analysis"
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env: TIDY=clang-tidy-10
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang-tidy-10
      script: ./tools/tidy
    - stage: build
      name: "Clang 10"
      os: linux
      sudo: required
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
      env:
        - COMPILER=clang++-10
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang++-10
      script: ./build
    - stage: build
      name: "GCC 8"
      os: linux
      sudo: required
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
      env:
        - COMPILER=g++-8
      script: ./build
    - stage: build
      name: "Emscripten"
      language: nodejs
      node_js:
        - node
      sudo: required
      services:
        - docker
      before_install:
        - docker run -dit --name emscripten -v $(pwd):/src trzeci/emscripten bash
      script:
        - docker exec -it emscripten bash -c "./tools/build-emscripten"
    - stage: sanitizers
      name: "Address sanitizer"
      os: linux
      sudo: required
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
      env: COMPILER=clang++-10
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang++-10
      script: ./tools/build-asan
    - stage: sanitizers
      name: "Thread sanitizer"
      os: linux
      sudo: required
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
      env: COMPILER=clang++-10
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang++-10
      script: ./tools/build-tsan
    - stage: sanitizers
      name: "Undefined behavior sanitizer"
      os: linux
      sudo: required
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - ninja-build
      env: COMPILER=clang++-10
      before_install:
        - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        - sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        - sudo apt-add-repository "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu xenial main"
        - sudo apt-get update -qq
        - sudo apt-get install -y --allow-unauthenticated clang++-10
      script: ./tools/build-ubsan
    - stage: deploy
      name: "Deploy to Github Pages"
      if: branch = master
      sudo: required
      services:
        - docker
      before_install:
        - docker run -dit --name emscripten -v $(pwd):/src trzeci/emscripten bash
      script:
        - docker exec -it emscripten bash -c "./tools/build-release-emscripten"
        - docker exec -it emscripten bash -c "./tools/deploy"
      deploy:
        provider: pages:git
        edge: true
        local_dir: artifacts/ReleaseEmscripten/deploy
        commit_message: Deploy %{project_name} to %{url}:%{target_branch} from %{git_branch} at %{git_sha}
        token: cnGxj6aho0w1sBD+BEDgokNutElVR3/nwWb8t1nTTUM6ULvP0FRoM4HikyR46vtoaomR+7kIn5RQ+IMb+RsO7n1sJTMTIIesD4dnRgycCyoxiw7riFoyVx3zr0ZoLdlmD89li88dqZzHsFWS1g2SoNzL6V+DJYAoQn+gCkz2xzyS7z+ePoHYq0dtJsWkbrEEukGFhUovlaNo1QRlfG6uB5qDuCdUBcwj3wrBSJB/vuzAbQ3A2J/00a0074yUPv0A8YZhfTqSIzfeH0s7QG9dknItTYuPf6CEm5yD9Hq9aK3IQUovakh70jP4HIa2WO//h8N5tTpoeWnEMUp2DBwTwmpyEwTitOYygvHU8K9HEY70TErWIB5nZGGvfTVodLPvn3zlJ1aHw9q8hW7c3KPaD1lf5YDbagSr0JQYTaUO2QSAl8z+RJWbSVLqrUoGilFknCrsYI5uH8bD3JSF6BZDIqQK8pcUU1AQe9jfQKMHB2hYY/nmr2Ac68j7sX/ItZTMaJ6eHM9/F9G7miN7R6Htq8pixz6fT4ilJrT8niYzA3XuMOWHX7Mbeh9wl7PoJZX2QnQcMeWbKfFzDZmSqrZiA6sCHvfciYRw67xeuIJpjbnIntlNwhuM8swS9EQwjQ8lFg3gHNkGg4ryQotlcwnhKCLfsvZNm/0N2SEHjDDkYLU=
